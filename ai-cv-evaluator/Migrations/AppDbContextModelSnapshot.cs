// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ai_cv_evaluator.Data;

#nullable disable

namespace ai_cv_evaluator.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ai_cv_evaluator.Data.Entities.DocumentVector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChunkId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmbeddingJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocumentVectors");
                });

            modelBuilder.Entity("ai_cv_evaluator.Data.Entities.EvaluationJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CvFilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReportFilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("EvaluationJobs");
                });

            modelBuilder.Entity("ai_cv_evaluator.Data.Entities.EvaluationResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CvFeedback")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("CvMatchRate")
                        .HasColumnType("double precision");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<string>("OverallSummary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectFeedback")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("ProjectScore")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("EvaluationResults");
                });

            modelBuilder.Entity("ai_cv_evaluator.Data.Entities.ReferenceDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VectorId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ReferenceDocuments");
                });

            modelBuilder.Entity("ai_cv_evaluator.Data.Entities.EvaluationResult", b =>
                {
                    b.HasOne("ai_cv_evaluator.Data.Entities.EvaluationJob", "Job")
                        .WithOne("Result")
                        .HasForeignKey("ai_cv_evaluator.Data.Entities.EvaluationResult", "JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("ai_cv_evaluator.Data.Entities.EvaluationJob", b =>
                {
                    b.Navigation("Result");
                });
#pragma warning restore 612, 618
        }
    }
}
